const signalsText = (await Deno.readTextFile("../_input/13.txt"))

const sum = signalsText
  .split("\n\n")
  .map((line) => line.split("\n").map(JSON.parse))
  .map(([left, right], index) => {
    return comparePacketData(left, right) ? index + 1 : 0
  }).reduce((a, b) => a + b)

console.log("Part 1:", sum)

const dividers = [[[2]], [[6]]]

const decoder = signalsText
  .split("\n")
  .filter(Boolean)
  .map(JSON.parse)
  .concat(dividers)
  .sort((left, right) => comparePacketData(left, right) ? -1 : 1)
  .reduce(
    (acc, el, index) => (dividers.includes(el) ? acc * (index + 1) : acc),
    1
  )

console.log("Part 1:", decoder)

// generated by ChatGPT
function comparePacketData(left, right) {
  // Convert integers to single-element lists
  if (typeof left === 'number') left = [left];
  if (typeof right === 'number') right = [right];

  // Compare lists by their elements
  for (let i = 0; i < left.length && i < right.length; i++) {
    // If both elements are integers, compare them by their numerical values
    if (typeof left[i] === 'number' && typeof right[i] === 'number') {
      if (left[i] < right[i]) return true;  // Left is smaller
      if (left[i] > right[i]) return false; // Left is larger
    }
    // Otherwise, recursively compare the elements
    else {
      if (comparePacketData(left[i], right[i])) return true;  // Left is smaller
      if (comparePacketData(right[i], left[i])) return false; // Left is larger
    }
  }

  // If we haven't returned yet, the lists are the same up to the length of the shorter list
  // If the left list is shorter, it is considered smaller
  return left.length < right.length;
}
